{"version":3,"sources":["api.js","components/search/Search.jsx","components/current-weather/weather.jsx","components/Forecast/Forecast.jsx","App.js","reportWebVitals.js","index.js"],"names":["geoApiOptions","method","headers","Search","onSearchChange","useState","search","setsearch","placeholder","debounceTimeout","value","onChange","searchData","loadOptions","inputValue","fetch","then","response","json","options","data","map","city","latitude","longitude","label","name","countryCode","catch","err","console","error","CurrentWeather","className","weather","description","alt","src","icon","Math","round","main","temp","feels_like","wind","speed","humidity","pressure","WEEK_DAYS","Forecast","dayInAWeek","Date","getDay","forecastDays","slice","length","concat","allowZeroExpanded","list","splice","item","idx","key","temp_max","temp_min","clouds","all","sea_level","i","App","currentWeather","setCurrentWeather","forecast","setForecast","log","split","lat","lon","currentWeatherFetch","forecastFetch","Promise","weatherResponse","forecastResponse","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":";0TAAaA,EAAgB,CAC5BC,OAAQ,MACRC,QAAS,CACR,iBAAkB,qDAClB,kBAAmB,8BCsDNC,EAjDF,SAAD,GAAsB,IAAnBC,EAAc,EAAdA,eACX,EAAyBC,mBAAS,MAAK,mBAAhCC,EAAM,KAACC,EAAS,KAuCvB,OACA,kBAAC,IAAa,CACdC,YAAY,kBACZC,gBAAiB,IACjBC,MAAOJ,EACPK,SAhBiB,SAACC,GAClBL,EAAUK,GACVR,EAAeQ,IAefC,YA1CkB,SAACC,GACf,OAAOC,MAAK,UDLK,2CCMD,iDAAyCD,GAAad,GACrEgB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACC,GACH,MAAO,CACPE,QAASF,EAASG,KAAKC,KAAI,SAACC,GACxB,MAAM,CACFZ,MAAM,GAAD,OAAIY,EAAKC,SAAQ,YAAID,EAAKE,WAC/BC,MAAM,GAAD,OAAKH,EAAKI,KAAI,aAAKJ,EAAKK,qBAMxCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,UCsCrBG,G,YA1DO,SAAF,GAAa,IAATZ,EAAI,EAAJA,KACpB,OACI,yBAAKa,UAAU,WACX,yBAAKA,UAAU,OACX,8BACA,uBAAGA,UAAU,QAAQb,EAAKE,MAC1B,uBAAGW,UAAU,uBAAuBb,EAAKc,QAAQ,GAAGC,cAGpD,yBAAKC,IAAI,UAAUH,UAAU,eAAeI,IAAG,2BAAsBjB,EAAKc,QAAQ,GAAGI,KAAI,WAS7F,yBAAKL,UAAU,UACX,uBAAGA,UAAU,eAAeM,KAAKC,MAAMpB,EAAKqB,KAAKC,MAAK,UACtD,yBAAKT,UAAU,WACX,yBAAKA,UAAU,iBACf,0BAAMA,UAAU,mBAAiB,YAEjC,yBAAKA,UAAU,iBACX,0BAAMA,UAAU,mBAAiB,cACjC,0BAAMA,UAAU,mBAAmBM,KAAKC,MAAMpB,EAAKqB,KAAKE,YAAW,WAIxE,yBAAKV,UAAU,iBACV,0BAAMA,UAAU,mBAAiB,QACjC,0BAAMA,UAAU,mBAAmBb,EAAKwB,KAAKC,MAAK,QAGvD,yBAAKZ,UAAU,iBACV,0BAAMA,UAAU,mBAAiB,YACjC,0BAAMA,UAAU,mBAAmBb,EAAKqB,KAAKK,SAAQ,MAG1D,yBAAKb,UAAU,iBACV,0BAAMA,UAAU,mBAAiB,YACjC,0BAAMA,UAAU,mBAAmBb,EAAKqB,KAAKM,SAAQ,a,OCxCvEC,G,MAAY,CAAC,SAAU,UAAW,YAAa,WAAY,SAAU,WAAY,WAyDxEC,EAvDE,SAAH,GAAkB,IAAZ7B,EAAI,EAAJA,KACZ8B,GAAa,IAAIC,MAAOC,SACxBC,EAAeL,EAAUM,MAAMJ,EAAYF,EAAUO,QAAQC,OAAOR,EAAUM,MAAM,EAAGJ,IAE7F,OACE,oCACE,2BAAOjB,UAAU,SAAO,SACxB,kBAAC,IAAS,CAACwB,mBAAiB,GACzBrC,EAAKsC,KAAKC,OAAO,EAAG,GAAGtC,KAAI,SAACuC,EAAMC,GAAG,OACpC,kBAAC,IAAa,CAACC,IAAKD,GAClB,kBAAC,IAAoB,KACnB,kBAAC,IAAmB,KAClB,yBAAK5B,UAAU,cACb,yBAAKI,IAAG,2BAAsBuB,EAAK1B,QAAQ,GAAGI,KAAI,QAAQL,UAAU,aAAaG,IAAI,YACrF,2BAAOH,UAAU,OAAOoB,EAAaQ,IACrC,2BAAO5B,UAAU,eAAe2B,EAAK1B,QAAQ,GAAGC,aAChD,2BAAOF,UAAU,WAAWM,KAAKC,MAAMoB,EAAKnB,KAAKsB,UAAS,UAAMxB,KAAKC,MAAMoB,EAAKnB,KAAKuB,UAAS,YAIpG,kBAAC,IAAkB,KACjB,yBAAK/B,UAAU,sBACb,yBAAKA,UAAU,2BACb,4CACA,+BAAQ2B,EAAKnB,KAAKM,WAEpB,yBAAKd,UAAU,2BACb,4CACA,+BAAQ2B,EAAKnB,KAAKK,WAEpB,yBAAKb,UAAU,2BACb,0CACA,+BAAQ2B,EAAKK,OAAOC,IAAG,MAEzB,yBAAKjC,UAAU,2BACb,8CACA,+BAAQ2B,EAAKhB,KAAKC,MAAK,SAEzB,yBAAKZ,UAAU,2BACb,6CACA,+BAAQ2B,EAAKnB,KAAK0B,UAAS,MAE7B,yBAAKlC,UAAU,2BACb,8CACA,+BAAQ2B,EAAKnB,KAAKE,WAAU,mB,aCvD9C,ghGAAAyB,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAsDeC,MA/Cf,WACA,MAAyChE,mBAAS,MAAK,mBAAhDiE,EAAc,KAACC,EAAiB,KACvC,EAA4BlE,mBAAS,MAAK,mBAApCmE,EAAQ,KAACC,EAAW,KAoCxB,OARF3C,QAAQ4C,IAAIJ,GACZxC,QAAQ4C,IAAIF,GAQR,yBAAKvC,UAAU,aACd,kBAAC,EAAM,CAAC7B,eAhCc,SAACQ,GAC5B,MAAgBA,EAAWF,MAAMiE,MAAM,KAAI,mBAApCC,EAAG,KAACC,EAAG,KAERC,EAAoB/D,MAAM,GAAD,OJRF,0CIQqB,wBAAgB6D,EAAG,gBAAQC,EAAG,kBJPnD,mCIO4E,oBACnGE,EAAchE,MAAM,GAAD,OJTI,0CISe,yBAAiB6D,EAAG,gBAAQC,EAAG,kBJR9C,mCIQuE,oBAGpGG,QAAQd,IAAI,CAACY,EAAoBC,IAC5B/D,KAAI,uCAAC,WAAMC,GAAQ,yFACUA,EAAS,GAAGC,OAAM,OAAzB,OAAf+D,EAAgB,EAAD,cACQhE,EAAS,GAAGC,OAAM,OAAzCgE,EAAiB,EAAD,KAEtBX,EAAkB,aAACjD,KAAKV,EAAWa,OAASwD,IAC5CR,EAAY,aAACnD,KAAKV,EAAWa,OAASyD,IAAkB,2CAEzD,mDAPI,IASLtD,OAAM,SAACC,GAAG,OAAIC,QAAQ4C,IAAI7C,SAgBxByC,GAAiB,kBAAC,EAAc,CAAClD,KAAMkD,IACvCE,GAAY,kBAAC,EAAQ,CAACpD,KAAMoD,MCtCnBW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrE,MAAK,YAAkD,IAA/CsE,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDDO,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,kBAAC,IAAMC,WAAU,KACf,kBAAC,EAAG,QAORb,M","file":"static/js/main.bc761321.chunk.js","sourcesContent":["export const geoApiOptions = {\n\tmethod: 'GET',\n\theaders: {\n\t\t'X-RapidAPI-Key': '2b2ffec829msh2b5f39a229bc505p15e138jsn90200c3bab0f',\n\t\t'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com'\n\t}\n};\n\n\nexport const GEO_API_URL='https://wft-geo-db.p.rapidapi.com/v1/geo'\n\nexport const WEATHER_API_URL=\"https://api.openweathermap.org/data/2.5\"\nexport const WEATHER_API_KEY=\"d4776b59160e923b35178d914e15b28b\"","import { useState } from \"react\"\nimport React from \"react\"\nimport { AsyncPaginate } from \"react-select-async-paginate\"\nimport { GEO_API_URL,geoApiOptions } from \"../../api\"\n\n\n\n\n\nconst Search=({onSearchChange})=>{\n    const [search,setsearch]=useState(null)\n\n\n    const loadOptions=(inputValue)=>{\n        return fetch\n        ( `${GEO_API_URL}/cities?minPopulation=1000&namePrefix=${inputValue}`,geoApiOptions)\n        .then(response => response.json())\n        .then((response )=> {\n            return {\n            options: response.data.map((city)=>{\n                return{\n                    value:`${city.latitude} ${city.longitude}` ,\n                    label: `${city.name}, ${city.countryCode}`\n                }\n            })\n\n        }\n        })\n        .catch(err => console.error(err));\n\n\n    }\n\n\n\n\n\n\nconst handleOnChange=(searchData)=>{\n    setsearch(searchData)\n    onSearchChange(searchData)\n}\n\n\n\n\n\n\n\n    return (\n    <AsyncPaginate\n    placeholder=\"Search for city\"\n    debounceTimeout={600}\n    value={search}\n    onChange={handleOnChange}\n    loadOptions={loadOptions}/>)\n}\n\nexport default Search","import React from 'react';\n\nimport \"./weather.css\"\n\n\n\n\n\nconst CurrentWeather =({data})=>{\n    return (\n        <div className=\"weather\">\n            <div className=\"top\">\n                <span>\n                <p className=\"city\">{data.city}</p>\n                <p className=\"weather-description\">{data.weather[0].description}</p>  \n                </span>\n                \n                <img alt=\"weather\" className=\"weather-icon\" src={`/weatherApp/icon/${data.weather[0].icon}.png`}/> \n\n                \n                \n             \n              \n\n            </div>\n\n            <div className=\"bottom\">\n                <p className=\"temperature\">{Math.round(data.main.temp)}째F </p>\n                <div className=\"details\">\n                    <div className=\"parameter-row\">\n                    <span className=\"parameter-label\">Details</span>\n                    </div>\n                    <div className=\"parameter-row\">\n                        <span className=\"parameter-label\">Feels Like</span>\n                        <span className=\"parameter-value\">{Math.round(data.main.feels_like)}째F </span>\n\n                   </div>\n\n                   <div className=\"parameter-row\">\n                        <span className=\"parameter-label\">Wind</span>\n                        <span className=\"parameter-value\">{data.wind.speed}m/s</span>\n\n                   </div>\n                   <div className=\"parameter-row\">\n                        <span className=\"parameter-label\">Humidity</span>\n                        <span className=\"parameter-value\">{data.main.humidity}%</span>\n\n                   </div>\n                   <div className=\"parameter-row\">\n                        <span className=\"parameter-label\">Pressure</span>\n                        <span className=\"parameter-value\">{data.main.pressure}Pas</span>\n\n                   </div>\n\n                    \n                </div>\n\n\n\n            </div>\n\n        </div>\n    );\n}\n\n\nexport default CurrentWeather","import React from \"react\";\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionItemHeading,\n  AccordionItemButton,\n  AccordionItemPanel,\n} from \"react-accessible-accordion\";\nimport \"./forecast.css\";\n\nconst WEEK_DAYS = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\nconst Forecast = ({ data }) => {\n  const dayInAWeek = new Date().getDay();\n  const forecastDays = WEEK_DAYS.slice(dayInAWeek, WEEK_DAYS.length).concat(WEEK_DAYS.slice(0, dayInAWeek));\n  \n  return (\n    <>\n      <label className=\"title\">Daily</label>\n      <Accordion allowZeroExpanded>\n        {data.list.splice(0, 7).map((item, idx) => (\n          <AccordionItem key={idx}>\n            <AccordionItemHeading>\n              <AccordionItemButton>\n                <div className=\"daily-item\">\n                  <img src={`/weatherApp/icon/${item.weather[0].icon}.png`} className=\"icon-small\" alt=\"weather\" />\n                  <label className=\"day\">{forecastDays[idx]}</label>\n                  <label className=\"description\">{item.weather[0].description}</label>\n                  <label className=\"min-max\">{Math.round(item.main.temp_max)}째F /{Math.round(item.main.temp_min)}째F</label>\n                </div>\n              </AccordionItemButton>\n            </AccordionItemHeading>\n            <AccordionItemPanel>\n              <div className=\"daily-details-grid\">\n                <div className=\"daily-details-grid-item\">\n                  <label>Pressure:</label>\n                  <label>{item.main.pressure}</label>\n                </div>\n                <div className=\"daily-details-grid-item\">\n                  <label>Humidity:</label>\n                  <label>{item.main.humidity}</label>\n                </div>\n                <div className=\"daily-details-grid-item\">\n                  <label>Clouds:</label>\n                  <label>{item.clouds.all}%</label>\n                </div>\n                <div className=\"daily-details-grid-item\">\n                  <label>Wind speed:</label>\n                  <label>{item.wind.speed} m/s</label>\n                </div>\n                <div className=\"daily-details-grid-item\">\n                  <label>Sea level:</label>\n                  <label>{item.main.sea_level}m</label>\n                </div>\n                <div className=\"daily-details-grid-item\">\n                  <label>Feels like:</label>\n                  <label>{item.main.feels_like}째C</label>\n                </div>\n              </div>\n            </AccordionItemPanel>\n          </AccordionItem>\n        ))}\n      </Accordion>\n    </>\n  );\n};\n\nexport default Forecast;","import Search from \"./components/search/Search\"\nimport './App.css';\nimport React from \"react\";\nimport CurrentWeather from \"./components/current-weather/weather\";\nimport { WEATHER_API_URL ,WEATHER_API_KEY} from \"./api\";\nimport { useState } from \"react\";\nimport Forecast from \"./components/Forecast/Forecast\";\n\nfunction App() {\nconst [currentWeather,setCurrentWeather]=useState(null)\nconst[forecast,setForecast]=useState(null)\n\n\n\n\n\nconst handleonSearchChange=(searchData)=>{\nconst [lat,lon]=searchData.value.split(\" \")\n\nconst currentWeatherFetch=fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=imperial`)\nconst forecastFetch=fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=imperial`)\n\n\nPromise.all([currentWeatherFetch,forecastFetch])\n    .then(async(response)=>{\n      const weatherResponse=await response[0].json()\n      const forecastResponse=await response[1].json()\n    \n      setCurrentWeather({city:searchData.label,...weatherResponse})\n      setForecast({city:searchData.label,...forecastResponse})\n  \n    })\n\n   .catch((err)=> console.log(err))\n\n\n\n}\nconsole.log(currentWeather)\nconsole.log(forecast)\n\n\n\n\n\n\n  return (\n    <div className=\"container\">\n     <Search onSearchChange={handleonSearchChange}/>\n     {currentWeather &&<CurrentWeather data={currentWeather}/>}\n     {forecast && <Forecast data={forecast}/>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}